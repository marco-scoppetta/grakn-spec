syntax = "proto3";

package ai.grakn.rpc.generated;

service Grakn {
    /*
        Represents a full transaction. The stream of `TxRequest`s must begin with a `Open` message.
        When the call is completed, the transaction will always be closed, with or without a `Commit` message.
    */
    rpc Tx (stream TxRequest) returns (stream TxResponse);
}

message TxRequest {
    oneof request {
        Open open = 1;
        Commit commit = 2;
        ExecQuery execQuery = 3;
        Next next = 4;
        Stop stop = 5;
        GetConceptProperty getConceptProperty = 6;
    }
}

/*
    Open a transaction on a keyspace. This must be the first message sent.
    After this message, the server will send a `Done` message and then accept a command message.
*/
message Open {
    Keyspace keyspace = 1;
    TxType txType = 2;
    /* Fields ignored in the open-source version. */
    string username = 3;
    string password = 4;
}

/*
    Command to commit a transaction.
    After this message, the server will send a `Done` message and then accept a command message.
*/
message Commit {}

/*
    Command to start executing a query.
    After this message, the server will send an `Iterator` message and then accept a command message.
*/
message ExecQuery {
    Query query = 1;
    Infer infer = 2; // If this is not present, leave at server default.
}

/*
    Request next query result.
    After this message, the server will send a `QueryResult` or a `Done` message and then accept a command message.
*/
message Next {
    IteratorId iteratorId = 1;
}

/*
    Tell the server we have finished executing a query.
    After this message, the server will send a `Done` message and then accept a command message.
*/
message Stop {
    IteratorId iteratorId = 1;
}

/*
    Ask the server for a property of a concept.
    After this message, the server will send a `ConceptPropertyValue` message and then accept a command message.
*/
message GetConceptProperty {
    ConceptId id = 1;
    ConceptProperty conceptProperty = 2;
}

enum ConceptProperty {
    ValueProperty = 0;
    DataTypeProperty = 1;
    LabelProperty = 2;
    IsImplicit = 3;
    IsInferred = 4;
    IsAbstract = 5;
    When = 6;
    Then = 7;
    Regex = 8;
}

/*
    Toggle inference for this query.
*/
message Infer {
    bool value = 1;
}

message TxResponse {
    oneof response {
        QueryResult queryResult = 1;
        Done done = 2;
        ConceptPropertyValue conceptPropertyValue = 3;
        IteratorId iteratorId = 4;
    }
}

message QueryResult {
    oneof queryResult {
        Answer answer = 1;
        // This is used to represent `aggregate` and `compute` query results.
        // These come in many different formats, so they are just returned
        // as JSON strings.
        string otherResult = 2;
    }
}

/*
    Tells the client we have completed their command.
*/
message Done {}

message ConceptPropertyValue {
    oneof value {
        AttributeValue attributeValue = 1;
        DataType dataType = 2;
        Label label = 3;
        bool isImplicit = 4;
        bool isInferred = 5;
        bool isAbstract = 6;
        Pattern when = 7;
        Pattern then = 8;
        string regex = 9;
    }
}

enum DataType {
    String = 0;
    Boolean = 1;
    Integer = 2;
    Long = 3;
    Float = 4;
    Double = 5;
    Date = 6;
}

message AttributeValue {
    oneof value {
        string string = 1;
        bool boolean = 2;
        int32 integer = 3;
        int64 long = 4;
        float float = 5;
        double double = 6;
        int64 date = 7; // time since epoch in milliseconds
    }
}

message Concept {
    ConceptId id = 1;
    BaseType baseType = 2;
}

enum BaseType {
    Entity = 0;
    Relationship = 1;
    Attribute = 2;
    EntityType = 3;
    RelationshipType = 4;
    AttributeType = 5;
    Role = 6;
    Rule = 7;
    MetaType = 8; // This represents the top-level meta type only
}

/*
    Represents an answer to a `get`, `insert` or `define` query. e.g.

    ```
    $x id V123; $y id V456;
    ```
    is represented as:
    ```
    Answer {
        "x": Concept { id: "V123" }
        "y": Concept { id: "V456" }
    }
    ```
*/
message Answer {
    map<string, Concept> answer = 1;
}

enum TxType {
    Read = 0;
    Write = 1;
    Batch = 2;
}

message Keyspace {
    string value = 1;
}

message Query {
    string value = 1;
}

message Pattern {
    string value = 1;
}

message ConceptId {
    string value = 1;
}

message Label {
    string value = 1;
}

message IteratorId {
    int32 id = 1;
}